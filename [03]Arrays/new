//MANIT

#include<iostream> // # preprocessor
using namespace std;
void partition(int arr[],int s,int e){
int pivot=arr[e];
int i=s-1;
for(int j=s;j<=e-1;j++){
if(arr[j]<pivot){
i++;
swap(arr[i],arr[j]);
}
}
swap(arr[i+1],arr[e]);
return i+1;
}
void quicksort(int arr[],int s,int e){
//base case
if(s>=e) return;

int piindex=partition(arr,s,e);
quicksort(arr,s,piindex-1);
quicksort(arr,piindex+1,e);
}
int main(){
int arr[5]={2,4,1,6,9};
int n=5;

quicksort(arr,0,n-1);
for(int i=0;i<n;i++)
cout<<arr[i]<<" ";
return 0;
}





//2


#include<iostream> // # preprocessor
using namespace std; //s m e
void merge(int *arr ,int s,int e ){ // 1 3 5 2 4 6
int mid=(s+e)/2; // 0 1 2 3 4 5
int n1=mid-s+1; //3
int n2=e-mid;
int mainarrayindex=s;
int *first=new int[n1];
int *second=new int[n2];
//fill in our first array
for(int i=0;i<n1;i++)
first[i]=arr[mainarrayindex++];

mainarrayindex=mid+1;
//fill in 2nd array
for(int i=0;i<n2;i++)
second[i]=arr[mainarrayindex++];

//merge 2 sorted arrays
int index1=0,index2=0;
mainarrayindex=s;

while(index1<n1 && index2<n2){
if(first[index1]<second[index2]){
arr[mainarrayindex++]=first[index1++];
}
else{
arr[mainarrayindex++]=second[index2++];
}
}
while(index1<n1) arr[mainarrayindex++]=first[index1++];
while(index2<n2)arr[mainarrayindex++]=second[index2++];
delete[]first;
delete[]second;
}
void mergesort(int *arr,int s,int e){
if(s>=e) return;

int mid=(s+e)/2;
//left part
mergesort(arr,s,mid);
//sort right half of array
mergesort(arr,mid+1,e);

merge(arr,s,e);

}
int main(){
int arr[6]={3,1,5,6,2,4};
int n=6;
mergesort(arr,0,n-1);

for(int i=0;i<n;i++)
cout<<arr[i]<<" ";
return 0;
}